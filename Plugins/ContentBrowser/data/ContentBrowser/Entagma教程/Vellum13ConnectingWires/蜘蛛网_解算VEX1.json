{
    "type": "QHoudiniNodeWidget",
    "data": "kwargs = {'toolname': 'geo', 'panename': '', 'altclick': False, 'ctrlclick': False,            'shiftclick': False, 'cmdclick': False, 'pane': None, 'viewport': None, 'inputnodename': '',            'outputindex': -1, 'inputs': [], 'outputnodename': '', 'inputindex': -1, 'outputs': [],            'branch': False, 'autoplace': False, 'requestnew': False}\nimport hou\n\nimport sys\nimport toolutils\n\noutputitem = None\ninputindex = -1\ninputitem = None\noutputindex = -1\n\nnum_args = 1\nh_extra_args = ''\npane = toolutils.activePane(kwargs)\nif not isinstance(pane, hou.NetworkEditor):\n    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)\n    if pane is None:\n       hou.ui.displayMessage(\n               'Cannot create node: cannot find any network pane')\n       sys.exit(0)\nelse: # We're creating this tool from the TAB menu inside a network editor\n    pane_node = pane.pwd()\n    if \"outputnodename\" in kwargs and \"inputindex\" in kwargs:\n        outputitem = pane_node.item(kwargs[\"outputnodename\"])\n        inputindex = kwargs[\"inputindex\"]\n        h_extra_args += 'set arg4 = \"' + kwargs[\"outputnodename\"] + '\"\\n'\n        h_extra_args += 'set arg5 = \"' + str(inputindex) + '\"\\n'\n        num_args = 6\n    if \"inputnodename\" in kwargs and \"outputindex\" in kwargs:\n        inputitem = pane_node.item(kwargs[\"inputnodename\"])\n        outputindex = kwargs[\"outputindex\"]\n        h_extra_args += 'set arg6 = \"' + kwargs[\"inputnodename\"] + '\"\\n'\n        h_extra_args += 'set arg9 = \"' + str(outputindex) + '\"\\n'\n        num_args = 9\n    if \"autoplace\" in kwargs:\n        autoplace = kwargs[\"autoplace\"]\n    else:\n        autoplace = False\n    # If shift-clicked we want to auto append to the current\n    # node\n    if \"shiftclick\" in kwargs and kwargs[\"shiftclick\"]:\n        if inputitem is None:\n            inputitem = pane.currentNode()\n            outputindex = 0\n    if \"nodepositionx\" in kwargs and             \"nodepositiony\" in kwargs:\n        try:\n            pos = [ float( kwargs[\"nodepositionx\"] ),\n                    float( kwargs[\"nodepositiony\"] )]\n        except:\n            pos = None\n    else:\n        pos = None\n\n    if not autoplace and not pane.listMode():\n        if pos is not None:\n            pass\n        elif outputitem is None:\n            pos = pane.selectPosition(inputitem, outputindex, None, -1)\n        else:\n            pos = pane.selectPosition(inputitem, outputindex,\n                                      outputitem, inputindex)\n\n    if pos is not None:\n        if \"node_bbox\" in kwargs:\n            size = kwargs[\"node_bbox\"]\n            pos[0] -= size[0] / 2\n            pos[1] -= size[1] / 2\n        else:\n            pos[0] -= 0.573625\n            pos[1] -= 0.220625\n        h_extra_args += 'set arg2 = \"' + str(pos[0]) + '\"\\n'\n        h_extra_args += 'set arg3 = \"' + str(pos[1]) + '\"\\n'\nh_extra_args += 'set argc = \"' + str(num_args) + '\"\\n'\n\npane_node = pane.pwd()\nchild_type = pane_node.childTypeCategory().nodeTypes()\n\nif 'popwrangle' not in child_type:\n   hou.ui.displayMessage(\n           'Cannot create node: incompatible pane network type')\n   sys.exit(0)\n\n# First clear the node selection\npane_node.setSelected(False, True)\n\nh_path = pane_node.path()\nh_preamble = 'set arg1 = \"' + h_path + '\"\\n'\nh_cmd = r'''\nif ($argc < 2 || \"$arg2\" == \"\") then\n   set arg2 = 0\nendif\nif ($argc < 3 || \"$arg3\" == \"\") then\n   set arg3 = 0\nendif\n# Automatically generated script\n# $arg1 - the path to add this node\n# $arg2 - x position of the tile\n# $arg3 - y position of the tile\n# $arg4 - input node to wire to\n# $arg5 - which input to wire to\n# $arg6 - output node to wire to\n# $arg7 - the type of this node\n# $arg8 - the node is an indirect input\n# $arg9 - index of output from $arg6\n\n\\set noalias = 1\nset saved_path = `execute(\"oppwf\")`\nopcf $arg1\n\n# Node $_obj_geo1_vellumsolver1_dopnet1_forces_popwrangle1 (Dop/popwrangle)\nset _obj_geo1_vellumsolver1_dopnet1_forces_popwrangle1 = `run(\"opadd -e -n -v popwrangle popwrangle1\")`\noplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_vellumsolver1_dopnet1_forces_popwrangle1\nopspareds '    parm {         name    \"activate\"         baseparm         label   \"Activation\"         export  none     }     parm {         name    \"usegroup\"         baseparm         label   \"Label\"         nolabel         joinnext         export  none     }     parm {         name    \"partgroup\"         baseparm         label   \"Group\"         export  none     }     group {         name    \"folder2\"         label   \"Code\"          parm {             name    \"snippet\"             baseparm             label   \"VEXpression\"             export  all         }         parm {             name    \"exportlist\"             baseparm             label   \"Attributes to Create\"             export  none         }         parm {             name    \"vex_strict\"             baseparm             label   \"Enforce Prototypes\"             export  none         }     }      group {         name    \"folder2_1\"         label   \"Data Bindings\"          parm {             name    \"autobind\"             baseparm             label   \"Autobind by Name\"             export  none         }         multiparm {             name    \"bindings\"             label    \"Attribute Bindings\"             baseparm             default 0             parmtag { \"autoscope\" \"0000000000000000\" }             parmtag { \"multistartoffset\" \"1\" }              parm {                 name    \"binddata#\"                 baseparm                 label   \"Attribute Name\"                 export  none             }             parm {                 name    \"bindparm#\"                 baseparm                 label   \"VEX Parameter\"                 export  none             }         }          multiparm {             name    \"bindfield_num\"             label    \"Field Bindings\"             baseparm             default 0             parmtag { \"autoscope\" \"0000000000000000\" }             parmtag { \"multistartoffset\" \"1\" }              parm {                 name    \"bindfield_data#\"                 baseparm                 label   \"Field Name\"                 export  none             }             parm {                 name    \"bindfield_parm#\"                 baseparm                 label   \"VEX Parameter\"                 export  none             }         }          parm {             name    \"groupautobind\"             baseparm             label   \"Autobind Groups by Name\"             export  none         }         multiparm {             name    \"groupbindings\"             label    \"Group Bindings\"             baseparm             default 0             parmtag { \"autoscope\" \"0000000000000000\" }             parmtag { \"multistartoffset\" \"1\" }              parm {                 name    \"bindgroupname#\"                 baseparm                 label   \"Group Name\"                 export  none             }             parm {                 name    \"bindgroupparm#\"                 baseparm                 label   \"VEX Parameter\"                 export  none             }         }          parm {             name    \"vex_updatenmls\"             baseparm             label   \"Update Normals If Displaced\"             export  none         }         parm {             name    \"vex_precision\"             baseparm             label   \"VEX Precision\"             export  none         }     }      group {         name    \"folder2_2\"         label   \"Inputs\"          parm {             name    \"bindinputmenu1\"             baseparm             label   \"Input 1\"             export  none         }         parm {             name    \"bindgeoinput1\"             baseparm             label   \"SOP Path\"             export  none         }         parm {             name    \"binddopinput1\"             baseparm             label   \"DOP Data\"             export  none         }         parm {             name    \"binddopuseself1\"             baseparm             label   \"Use This Object\\'s Data\"             export  none         }         parm {             name    \"bindinputmenu2\"             baseparm             label   \"Input 2\"             export  none         }         parm {             name    \"bindgeoinput2\"             baseparm             label   \"SOP Path\"             export  none         }         parm {             name    \"binddopinput2\"             baseparm             label   \"DOP Data\"             export  none         }         parm {             name    \"binddopuseself2\"             baseparm             label   \"Use This Object\\'s Data\"             export  none         }         parm {             name    \"bindinputmenu3\"             baseparm             label   \"Input 3\"             export  none         }         parm {             name    \"bindgeoinput3\"             baseparm             label   \"SOP Path\"             export  none         }         parm {             name    \"binddopinput3\"             baseparm             label   \"DOP Data\"             export  none         }         parm {             name    \"binddopuseself3\"             baseparm             label   \"Use This Object\\'s Data\"             export  none         }         parm {             name    \"bindinputmenu4\"             baseparm             label   \"Input 4\"             export  none         }         parm {             name    \"bindgeoinput4\"             baseparm             label   \"SOP Path\"             export  none         }         parm {             name    \"binddopinput4\"             baseparm             label   \"DOP Data\"             export  none         }         parm {             name    \"binddopuseself4\"             baseparm             label   \"Use This Object\\'s Data\"             export  none         }     }      group {         name    \"folder2_3\"         label   \"Bindings\"          parm {             name    \"bindgeo\"             baseparm             label   \"Geometry\"             export  none         }         parm {             name    \"vex_cwdpath\"             baseparm             label   \"Evaluation Node Path\"             export  none         }         parm {             name    \"vex_outputmask\"             baseparm             label   \"Export Parameters\"             export  none         }     }      parm {         name    \"usetimestep\"         baseparm         label   \"Use Timestep\"         export  none     }     parm {         name    \"timescale\"         baseparm         label   \"Time Scale\"         export  none     }     parm {         name    \"Max_Pt_Dist\"         label   \"Max Pt Dist\"         type    float         default { \"0\" }         range   { 0 1 }     }     parm {         name    \"Min_Pt_Dist\"         label   \"Min Pt Dist\"         type    float         default { \"0\" }         range   { 0 1 }     } ' $_obj_geo1_vellumsolver1_dopnet1_forces_popwrangle1\nopparm $_obj_geo1_vellumsolver1_dopnet1_forces_popwrangle1  bindings ( 0 ) bindfield_num ( 0 ) groupbindings ( 0 )\nopparm $_obj_geo1_vellumsolver1_dopnet1_forces_popwrangle1 usegroup ( on ) partgroup ( '@connections<4' ) snippet ( 'float maxdist = chf(\"Max_Pt_Dist\");\\nfloat mindist = chf(\"Min_Pt_Dist\");\\n\\nstring grp = \"!\" + s@grpname;\\nint npt = nearpoint(0, grp, v@P, maxdist);\\n\\nvector npos = point(0, \"P\", npt);\\nfloat d = distance(v@P, npos);\\n\\nint cps[] = i[]@cpts;\\nint found = find(cps, npt);\\n\\n\\nif(npt >= 0 && d>mindist && found < 0 && rand(npt) < .1){\\n    int newprim = addprim(0, \"polyline\", @ptnum, npt);\\n    setprimattrib(0, \"type\", newprim, \"distance\");\\n    setprimattrib(0, \"stiffness\", newprim, 100.0);\\n    setprimattrib(0, \"restlenth\", newprim, d);\\n    setprimattrib(0, \"restlenthorig\", newprim, d);\\n    setprimattrib(0, \"dampingratio\", newprim, 0.01);\\n    \\n    setprimgroup(0, \"contract\", newprim, 1);\\n    \\n    i@connections += 1;\\n    push(cps, npt);\\n    i[]@cpts = cps;\\n}' ) bindinputmenu1 ( self ) bindgeo ( ConstraintGeometry ) Max_Pt_Dist ( 0.29999999999999999 ) Min_Pt_Dist ( 0.050000000000000003 )\nopset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_vellumsolver1_dopnet1_forces_popwrangle1\nopexprlanguage -s hscript $_obj_geo1_vellumsolver1_dopnet1_forces_popwrangle1\nopuserdata -n '___Version___' -v '' $_obj_geo1_vellumsolver1_dopnet1_forces_popwrangle1\nopset -p on $_obj_geo1_vellumsolver1_dopnet1_forces_popwrangle1\n\nopcf $arg1\n\nset oidx = 0\nif ($argc >= 9 && \"$arg9\" != \"\") then\n    set oidx = $arg9\nendif\n\nif ($argc >= 5 && \"$arg4\" != \"\") then\n    set output = $_obj_geo1_vellumsolver1_dopnet1_forces_popwrangle1\n    opwire -n $output -$arg5 $arg4\nendif\nif ($argc >= 6 && \"$arg6\" != \"\") then\n    set input = $_obj_geo1_vellumsolver1_dopnet1_forces_popwrangle1\n    if ($arg8) then\n        opwire -n -i $arg6 -0 $input\n    else\n        opwire -n -o $oidx $arg6 -0 $input\n    endif\nendif\nopcf $saved_path\n'''\nhou.hscript(h_preamble + h_extra_args + h_cmd)\n"
}