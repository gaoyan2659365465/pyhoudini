{
    "type": "QHoudiniNodeWidget",
    "data": "kwargs = {'toolname': 'geo', 'panename': '', 'altclick': False, 'ctrlclick': False,            'shiftclick': False, 'cmdclick': False, 'pane': None, 'viewport': None, 'inputnodename': '',            'outputindex': -1, 'inputs': [], 'outputnodename': '', 'inputindex': -1, 'outputs': [],            'branch': False, 'autoplace': False, 'requestnew': False}\nimport hou\n\nimport sys\nimport toolutils\n\noutputitem = None\ninputindex = -1\ninputitem = None\noutputindex = -1\n\nnum_args = 1\nh_extra_args = ''\npane = toolutils.activePane(kwargs)\nif not isinstance(pane, hou.NetworkEditor):\n    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)\n    if pane is None:\n       hou.ui.displayMessage(\n               'Cannot create node: cannot find any network pane')\n       sys.exit(0)\nelse: # We're creating this tool from the TAB menu inside a network editor\n    pane_node = pane.pwd()\n    if \"outputnodename\" in kwargs and \"inputindex\" in kwargs:\n        outputitem = pane_node.item(kwargs[\"outputnodename\"])\n        inputindex = kwargs[\"inputindex\"]\n        h_extra_args += 'set arg4 = \"' + kwargs[\"outputnodename\"] + '\"\\n'\n        h_extra_args += 'set arg5 = \"' + str(inputindex) + '\"\\n'\n        num_args = 6\n    if \"inputnodename\" in kwargs and \"outputindex\" in kwargs:\n        inputitem = pane_node.item(kwargs[\"inputnodename\"])\n        outputindex = kwargs[\"outputindex\"]\n        h_extra_args += 'set arg6 = \"' + kwargs[\"inputnodename\"] + '\"\\n'\n        h_extra_args += 'set arg9 = \"' + str(outputindex) + '\"\\n'\n        num_args = 9\n    if \"autoplace\" in kwargs:\n        autoplace = kwargs[\"autoplace\"]\n    else:\n        autoplace = False\n    # If shift-clicked we want to auto append to the current\n    # node\n    if \"shiftclick\" in kwargs and kwargs[\"shiftclick\"]:\n        if inputitem is None:\n            inputitem = pane.currentNode()\n            outputindex = 0\n    if \"nodepositionx\" in kwargs and             \"nodepositiony\" in kwargs:\n        try:\n            pos = [ float( kwargs[\"nodepositionx\"] ),\n                    float( kwargs[\"nodepositiony\"] )]\n        except:\n            pos = None\n    else:\n        pos = None\n\n    if not autoplace and not pane.listMode():\n        if pos is not None:\n            pass\n        elif outputitem is None:\n            pos = pane.selectPosition(inputitem, outputindex, None, -1)\n        else:\n            pos = pane.selectPosition(inputitem, outputindex,\n                                      outputitem, inputindex)\n\n    if pos is not None:\n        if \"node_bbox\" in kwargs:\n            size = kwargs[\"node_bbox\"]\n            pos[0] -= size[0] / 2\n            pos[1] -= size[1] / 2\n        else:\n            pos[0] -= 0.573625\n            pos[1] -= 0.220625\n        h_extra_args += 'set arg2 = \"' + str(pos[0]) + '\"\\n'\n        h_extra_args += 'set arg3 = \"' + str(pos[1]) + '\"\\n'\nh_extra_args += 'set argc = \"' + str(num_args) + '\"\\n'\n\npane_node = pane.pwd()\nchild_type = pane_node.childTypeCategory().nodeTypes()\n\nif 'BoxN' not in child_type:\n   hou.ui.displayMessage(\n           'Cannot create node: incompatible pane network type')\n   sys.exit(0)\n\n# First clear the node selection\npane_node.setSelected(False, True)\n\nh_path = pane_node.path()\nh_preamble = 'set arg1 = \"' + h_path + '\"\\n'\nh_cmd = r'''\nif ($argc < 2 || \"$arg2\" == \"\") then\n   set arg2 = 0\nendif\nif ($argc < 3 || \"$arg3\" == \"\") then\n   set arg3 = 0\nendif\n# Automatically generated script\n# $arg1 - the path to add this node\n# $arg2 - x position of the tile\n# $arg3 - y position of the tile\n# $arg4 - input node to wire to\n# $arg5 - which input to wire to\n# $arg6 - output node to wire to\n# $arg7 - the type of this node\n# $arg8 - the node is an indirect input\n# $arg9 - index of output from $arg6\n\n\\set noalias = 1\nset saved_path = `execute(\"oppwf\")`\nopcf $arg1\n\n# Node $_obj_geo1_boxN (Sop/BoxN)\nset _obj_geo1_boxN = `run(\"opadd -e -n -u -v BoxN boxN\")`\noplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_boxN\nopparm $_obj_geo1_boxN BoxNum ( 10 )\nopset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_boxN\nopexprlanguage -s hscript $_obj_geo1_boxN\nopuserdata -n '___Version___' -v '' $_obj_geo1_boxN\nopcf $_obj_geo1_boxN\n\n# Node $_obj_geo1_boxN_output0 (Sop/output)\nset _obj_geo1_boxN_output0 = `run(\"opadd -e -n -v output output0\")`\noplocate -x `$arg2 + -0.97019302832243703` -y `$arg3 + 0.82460872084351333` $_obj_geo1_boxN_output0\nchblockbegin\nchadd -t 0 0 $_obj_geo1_boxN_output0 outputidx\nchkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'max(opdigits(\".\"),0)' $_obj_geo1_boxN_output0/outputidx\nchblockend\nopset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_boxN_output0\nopexprlanguage -s hscript $_obj_geo1_boxN_output0\nopuserdata -n '___Version___' -v '19.0.383' $_obj_geo1_boxN_output0\n\n# Node $_obj_geo1_boxN_box1 (Sop/box)\nset _obj_geo1_boxN_box1 = `run(\"opadd -e -n -v box box1\")`\noplocate -x `$arg2 + -0.97019302832243692` -y `$arg3 + 5.0200557793809413` $_obj_geo1_boxN_box1\nopparm -V 19.0.383 $_obj_geo1_boxN_box1 type ( polymesh ) divrate ( 2 2 2 )\nopset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_boxN_box1\nopexprlanguage -s hscript $_obj_geo1_boxN_box1\nopuserdata -n '___Version___' -v '19.0.383' $_obj_geo1_boxN_box1\n\n# Node $_obj_geo1_boxN_copy1 (Sop/copy)\nset _obj_geo1_boxN_copy1 = `run(\"opadd -e -n -v copy copy1\")`\noplocate -x `$arg2 + -0.97019302832243692` -y `$arg3 + 4.0788793087927058` $_obj_geo1_boxN_copy1\nchblockbegin\nchadd -t 0 0 $_obj_geo1_boxN_copy1 ncy\nchkey -t 0 -v 0 -V 0 -m 0 -M 0 -a 0 -A 0 -F 'ch(\"../BoxNum\")' $_obj_geo1_boxN_copy1/ncy\nchblockend\nopparm -V 19.0.383 $_obj_geo1_boxN_copy1 ncy ( ncy ) newg ( on ) copyg ( 'BoxGroup`$CY`' )\nopset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_boxN_copy1\nopexprlanguage -s hscript $_obj_geo1_boxN_copy1\nopuserdata -n '___Version___' -v '19.0.383' $_obj_geo1_boxN_copy1\n\n# Node $_obj_geo1_boxN_attribwrangle1 (Sop/attribwrangle)\nset _obj_geo1_boxN_attribwrangle1 = `run(\"opadd -e -n -v attribwrangle attribwrangle1\")`\noplocate -x `$arg2 + -0.9731930248560543` -y `$arg3 + 2.7448616747515362` $_obj_geo1_boxN_attribwrangle1\nopparm $_obj_geo1_boxN_attribwrangle1  bindings ( 0 ) groupbindings ( 0 )\nopparm $_obj_geo1_boxN_attribwrangle1 class ( detail ) snippet ( 'int groupnum = chi(\"../BoxNum\");\\n//判断一共多少组\\nvector groupmax={0,0,0};//组的最低点和最高点\\nvector groupmin={0,0,0};\\nstring groupname;//组名\\nfloat groupDistance=0;//组间距离\\n\\nfor(int i=0;i<groupnum;i++){\\n    groupname = concat(\"BoxGroup\",itoa(i));//拼接字符串\\n    //printf(\"%s\\\\n\",groupname);\\n    groupmin = getbbox_min(0,groupname);//获取组的最低\\n    groupDistance = groupDistance + groupmin.y - groupmax.y;//计算组间距离\\n    //printf(\"%s\\\\n\",groupDistance);\\n    int primlist[] = expandprimgroup(0,groupname);//获取组里的面\\n    foreach(int prim;primlist){\\n        int pts[] = primpoints(0,prim);//根据面号取出所有点\\n        foreach(int pt;pts){\\n            vector pos = point(0,\"P\",pt);\\n            pos.y = pos.y - groupDistance;\\n            setpointattrib(0,\"P\",pt,pos);\\n        }\\n    }\\n    groupmax = getbbox_max(0,groupname);//获取组的最高点\\n}\\n\\n\\n\\n\\n\\n' )\nopset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_boxN_attribwrangle1\nopexprlanguage -s hscript $_obj_geo1_boxN_attribwrangle1\nopuserdata -n '___Version___' -v '' $_obj_geo1_boxN_attribwrangle1\noporder -e output0 box1 copy1 attribwrangle1 \nopcf ..\nopset -p on $_obj_geo1_boxN\n\nopcf $arg1\nopcf $_obj_geo1_boxN\nopwire -n $_obj_geo1_boxN_attribwrangle1 -0 $_obj_geo1_boxN_output0\nopwire -n $_obj_geo1_boxN_box1 -0 $_obj_geo1_boxN_copy1\nopwire -n $_obj_geo1_boxN_copy1 -0 $_obj_geo1_boxN_attribwrangle1\nopcf ..\n\nset oidx = 0\nif ($argc >= 9 && \"$arg9\" != \"\") then\n    set oidx = $arg9\nendif\n\nif ($argc >= 5 && \"$arg4\" != \"\") then\n    set output = $_obj_geo1_boxN\n    opwire -n $output -$arg5 $arg4\nendif\nif ($argc >= 6 && \"$arg6\" != \"\") then\n    set input = $_obj_geo1_boxN\n    if ($arg8) then\n        opwire -n -i $arg6 -0 $input\n    else\n        opwire -n -o $oidx $arg6 -0 $input\n    endif\nendif\nopcf $saved_path\n'''\nhou.hscript(h_preamble + h_extra_args + h_cmd)\n"
}