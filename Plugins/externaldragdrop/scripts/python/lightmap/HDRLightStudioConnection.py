# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.6
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HDRLightStudioConnection', [dirname(__file__)])
        except ImportError:
            import _HDRLightStudioConnection
            return _HDRLightStudioConnection
        if fp is not None:
            try:
                _mod = imp.load_module('_HDRLightStudioConnection', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _HDRLightStudioConnection = swig_import_helper()
    del swig_import_helper
else:
    import _HDRLightStudioConnection
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


HDRLS_LIVE_CURRENT_VERSION = _HDRLightStudioConnection.HDRLS_LIVE_CURRENT_VERSION
HDRLS_ERRORBIT = _HDRLightStudioConnection.HDRLS_ERRORBIT
MAX_FILENAME_LEN = _HDRLightStudioConnection.MAX_FILENAME_LEN
MAXIMUM_NAME_LENGTH = _HDRLightStudioConnection.MAXIMUM_NAME_LENGTH
MAX_STRING_LENGTH = _HDRLightStudioConnection.MAX_STRING_LENGTH
HDRLS_OK = _HDRLightStudioConnection.HDRLS_OK
HDRLS_FAILED = _HDRLightStudioConnection.HDRLS_FAILED
HDRLS_NOT_INTIALISED = _HDRLightStudioConnection.HDRLS_NOT_INTIALISED
HDRLS_NO_INTERFACE = _HDRLightStudioConnection.HDRLS_NO_INTERFACE
HDRLS_PARAM_ERROR = _HDRLightStudioConnection.HDRLS_PARAM_ERROR
HDRLS_STRING_TOO_LONG = _HDRLightStudioConnection.HDRLS_STRING_TOO_LONG
HDRLS_BUFFER_TOO_SHORT = _HDRLightStudioConnection.HDRLS_BUFFER_TOO_SHORT
HDRLS_UNSUPPORTED_VERSION = _HDRLightStudioConnection.HDRLS_UNSUPPORTED_VERSION
HDRLS_OUTOFMEMORY = _HDRLightStudioConnection.HDRLS_OUTOFMEMORY
HDRLS_UNKNOWN_MESSAGE = _HDRLightStudioConnection.HDRLS_UNKNOWN_MESSAGE
HDRLS_CRITICAL_INTERNAL_ERR = _HDRLightStudioConnection.HDRLS_CRITICAL_INTERNAL_ERR
HDRLS_BAD_SETTINGS = _HDRLightStudioConnection.HDRLS_BAD_SETTINGS
HDRLS_CANNOT_DO_FUNCTION_NOW = _HDRLightStudioConnection.HDRLS_CANNOT_DO_FUNCTION_NOW
HDRLS_UNLICENSED = _HDRLightStudioConnection.HDRLS_UNLICENSED
HDRLS_FILE_NOT_FOUND = _HDRLightStudioConnection.HDRLS_FILE_NOT_FOUND
HDRLS_INVALID_FILE_FORMAT = _HDRLightStudioConnection.HDRLS_INVALID_FILE_FORMAT
HDRLS_COMMS_TIMEOUT = _HDRLightStudioConnection.HDRLS_COMMS_TIMEOUT
HDRLS_INVALID_PROJECT_ASSET = _HDRLightStudioConnection.HDRLS_INVALID_PROJECT_ASSET
HDRLS_FAILED_TO_LOAD_ASSET = _HDRLightStudioConnection.HDRLS_FAILED_TO_LOAD_ASSET
HDRLS_NO_NODE_SELECTED = _HDRLightStudioConnection.HDRLS_NO_NODE_SELECTED
HDRLS_NO_COMMS = _HDRLightStudioConnection.HDRLS_NO_COMMS
HDRLS_BAD_COMMS_REPLY = _HDRLightStudioConnection.HDRLS_BAD_COMMS_REPLY
HDRLS_COMMS_ERROR = _HDRLightStudioConnection.HDRLS_COMMS_ERROR
HDRLS_CANNOT_START_PROCESS = _HDRLightStudioConnection.HDRLS_CANNOT_START_PROCESS
HDRLS_ALREADY_INITIALISED = _HDRLightStudioConnection.HDRLS_ALREADY_INITIALISED
HDRLS_UNKNOWN_HOSTRENDERER = _HDRLightStudioConnection.HDRLS_UNKNOWN_HOSTRENDERER
HDRLS_PROCESS_NOT_RUNNING = _HDRLightStudioConnection.HDRLS_PROCESS_NOT_RUNNING
HDRLS_UNKNOWN_CAMERA = _HDRLightStudioConnection.HDRLS_UNKNOWN_CAMERA
HDRLS_INTERNAL_EXT_MEM_ERR = _HDRLightStudioConnection.HDRLS_INTERNAL_EXT_MEM_ERR
HDRLS_ANOTHER_HOST_CONNECTION_DETECTED = _HDRLightStudioConnection.HDRLS_ANOTHER_HOST_CONNECTION_DETECTED
HDRLS_CANNOT_FIND_PROCESS = _HDRLightStudioConnection.HDRLS_CANNOT_FIND_PROCESS
HDRLS_PARAMREQUEST_ERROR = _HDRLightStudioConnection.HDRLS_PARAMREQUEST_ERROR
HDRLS_UNKNOWN_ERROR = _HDRLightStudioConnection.HDRLS_UNKNOWN_ERROR
HDRLS_RAWFORMAT_F32_RGBA = _HDRLightStudioConnection.HDRLS_RAWFORMAT_F32_RGBA
HDRLS_PF_EXR = _HDRLightStudioConnection.HDRLS_PF_EXR
HDRLS_PF_HDR = _HDRLightStudioConnection.HDRLS_PF_HDR
HDRLS_PF_RENDERMAN = _HDRLightStudioConnection.HDRLS_PF_RENDERMAN
HDRLS_PF_TX = _HDRLightStudioConnection.HDRLS_PF_TX
HDRLS_PRF_EXR = _HDRLightStudioConnection.HDRLS_PRF_EXR
HDRLS_PRF_HDR = _HDRLightStudioConnection.HDRLS_PRF_HDR
HDRLS_PRF_LIVE = _HDRLightStudioConnection.HDRLS_PRF_LIVE
HDRLS_NPO_CLEAR = _HDRLightStudioConnection.HDRLS_NPO_CLEAR
HDRLS_NPO_GRADIENT = _HDRLightStudioConnection.HDRLS_NPO_GRADIENT
HDRLS_NPO_IMAGE = _HDRLightStudioConnection.HDRLS_NPO_IMAGE
HDRLS_LIDF_PREMULT_RGB = _HDRLightStudioConnection.HDRLS_LIDF_PREMULT_RGB
HDRLS_LIDF_RGBA = _HDRLightStudioConnection.HDRLS_LIDF_RGBA
HDRLS_LIDF_RGB_AAA_PAIR = _HDRLightStudioConnection.HDRLS_LIDF_RGB_AAA_PAIR
HDRLS_LIDF_PREMULT_RGB_AAA_PAIR = _HDRLightStudioConnection.HDRLS_LIDF_PREMULT_RGB_AAA_PAIR
HDRLS_LIDF_RGB_8BIT_AAA_TIFF_PAIR = _HDRLightStudioConnection.HDRLS_LIDF_RGB_8BIT_AAA_TIFF_PAIR
HDRLS_LIDF_PREMULT_RGBA = _HDRLightStudioConnection.HDRLS_LIDF_PREMULT_RGBA
HDRLS_LIDF_PREMULT_RGB_8BIT_AAA_TIFF_PAIR = _HDRLightStudioConnection.HDRLS_LIDF_PREMULT_RGB_8BIT_AAA_TIFF_PAIR
HDRLS_LT_AREA = _HDRLightStudioConnection.HDRLS_LT_AREA
HDRLS_LF_CONSTANT = _HDRLightStudioConnection.HDRLS_LF_CONSTANT
HDRLS_LF_QUADRATIC = _HDRLightStudioConnection.HDRLS_LF_QUADRATIC
HDRLS_LPO_REFLECTION = _HDRLightStudioConnection.HDRLS_LPO_REFLECTION
HDRLS_LPO_ILLUMINATION = _HDRLightStudioConnection.HDRLS_LPO_ILLUMINATION
HDRLS_LPO_RIM = _HDRLightStudioConnection.HDRLS_LPO_RIM
HDRLS_TT_ENVIRONMENT = _HDRLightStudioConnection.HDRLS_TT_ENVIRONMENT
HDRLS_TT_AREALIGHT = _HDRLightStudioConnection.HDRLS_TT_AREALIGHT
HDRLS_ASE_NONE = _HDRLightStudioConnection.HDRLS_ASE_NONE
HDRLS_ASEC_GENERAL = _HDRLightStudioConnection.HDRLS_ASEC_GENERAL
HDRLS_ASEC_FB = _HDRLightStudioConnection.HDRLS_ASEC_FB
HDRLS_ASEC_FB_NO_IMAGE = _HDRLightStudioConnection.HDRLS_ASEC_FB_NO_IMAGE
HDRLS_ASEC_FB_INVALID_SETUP = _HDRLightStudioConnection.HDRLS_ASEC_FB_INVALID_SETUP
HDRLS_ASEC_SS = _HDRLightStudioConnection.HDRLS_ASEC_SS
HDRLS_ASEC_SS_NO_CAMERA = _HDRLightStudioConnection.HDRLS_ASEC_SS_NO_CAMERA
HDRLS_ASEC_SS_CAMERA_INVALID = _HDRLightStudioConnection.HDRLS_ASEC_SS_CAMERA_INVALID
HDRLS_ASEC_SS_EXPORT_FAILED = _HDRLightStudioConnection.HDRLS_ASEC_SS_EXPORT_FAILED
HDRLS_ASEC_SS_EXPORTER_UNAVAILABLE = _HDRLightStudioConnection.HDRLS_ASEC_SS_EXPORTER_UNAVAILABLE
HDRLS_ASEC_SS_PARAM_ERROR = _HDRLightStudioConnection.HDRLS_ASEC_SS_PARAM_ERROR
HDRLS_INT_IPR_TARGET_WIDTH = _HDRLightStudioConnection.HDRLS_INT_IPR_TARGET_WIDTH
HDRLS_INT_IPR_TARGET_HEIGHT = _HDRLightStudioConnection.HDRLS_INT_IPR_TARGET_HEIGHT
HDRLS_CHDRLSVEC2F_IPR_TARGET_SIZE = _HDRLightStudioConnection.HDRLS_CHDRLSVEC2F_IPR_TARGET_SIZE
HDRLS_STRING_CAMERA = _HDRLightStudioConnection.HDRLS_STRING_CAMERA
HDRLS_STRING_CAMERALIST = _HDRLightStudioConnection.HDRLS_STRING_CAMERALIST
HDRLS_FLOAT_FPS = _HDRLightStudioConnection.HDRLS_FLOAT_FPS
HDRLS_FLOAT_TIME_START = _HDRLightStudioConnection.HDRLS_FLOAT_TIME_START
HDRLS_FLOAT_TIME_END = _HDRLightStudioConnection.HDRLS_FLOAT_TIME_END
HDRLS_FLOAT_TIME_CURRENT = _HDRLightStudioConnection.HDRLS_FLOAT_TIME_CURRENT
HDRLS_CHDRLSVEC2F_TIME_RANGE = _HDRLightStudioConnection.HDRLS_CHDRLSVEC2F_TIME_RANGE
HDRLS_IPRC_START = _HDRLightStudioConnection.HDRLS_IPRC_START
HDRLS_IPRC_STOP = _HDRLightStudioConnection.HDRLS_IPRC_STOP
HDRLS_IPRC_RESTART = _HDRLightStudioConnection.HDRLS_IPRC_RESTART
class CHDRLSVec2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSVec2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSVec2f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_fX"] = _HDRLightStudioConnection.CHDRLSVec2f_m_fX_set
    __swig_getmethods__["m_fX"] = _HDRLightStudioConnection.CHDRLSVec2f_m_fX_get
    if _newclass:m_fX = _swig_property(_HDRLightStudioConnection.CHDRLSVec2f_m_fX_get, _HDRLightStudioConnection.CHDRLSVec2f_m_fX_set)
    __swig_setmethods__["m_fY"] = _HDRLightStudioConnection.CHDRLSVec2f_m_fY_set
    __swig_getmethods__["m_fY"] = _HDRLightStudioConnection.CHDRLSVec2f_m_fY_get
    if _newclass:m_fY = _swig_property(_HDRLightStudioConnection.CHDRLSVec2f_m_fY_get, _HDRLightStudioConnection.CHDRLSVec2f_m_fY_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSVec2f()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSVec2f
    __del__ = lambda self : None;
CHDRLSVec2f_swigregister = _HDRLightStudioConnection.CHDRLSVec2f_swigregister
CHDRLSVec2f_swigregister(CHDRLSVec2f)

class CHDRLSVec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSVec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSVec3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_fX"] = _HDRLightStudioConnection.CHDRLSVec3f_m_fX_set
    __swig_getmethods__["m_fX"] = _HDRLightStudioConnection.CHDRLSVec3f_m_fX_get
    if _newclass:m_fX = _swig_property(_HDRLightStudioConnection.CHDRLSVec3f_m_fX_get, _HDRLightStudioConnection.CHDRLSVec3f_m_fX_set)
    __swig_setmethods__["m_fY"] = _HDRLightStudioConnection.CHDRLSVec3f_m_fY_set
    __swig_getmethods__["m_fY"] = _HDRLightStudioConnection.CHDRLSVec3f_m_fY_get
    if _newclass:m_fY = _swig_property(_HDRLightStudioConnection.CHDRLSVec3f_m_fY_get, _HDRLightStudioConnection.CHDRLSVec3f_m_fY_set)
    __swig_setmethods__["m_fZ"] = _HDRLightStudioConnection.CHDRLSVec3f_m_fZ_set
    __swig_getmethods__["m_fZ"] = _HDRLightStudioConnection.CHDRLSVec3f_m_fZ_get
    if _newclass:m_fZ = _swig_property(_HDRLightStudioConnection.CHDRLSVec3f_m_fZ_get, _HDRLightStudioConnection.CHDRLSVec3f_m_fZ_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSVec3f()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSVec3f
    __del__ = lambda self : None;
CHDRLSVec3f_swigregister = _HDRLightStudioConnection.CHDRLSVec3f_swigregister
CHDRLSVec3f_swigregister(CHDRLSVec3f)

class CHDRLSLightTransform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSLightTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSLightTransform, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_vecWorldPos"] = _HDRLightStudioConnection.CHDRLSLightTransform_m_vecWorldPos_set
    __swig_getmethods__["m_vecWorldPos"] = _HDRLightStudioConnection.CHDRLSLightTransform_m_vecWorldPos_get
    if _newclass:m_vecWorldPos = _swig_property(_HDRLightStudioConnection.CHDRLSLightTransform_m_vecWorldPos_get, _HDRLightStudioConnection.CHDRLSLightTransform_m_vecWorldPos_set)
    __swig_setmethods__["m_vecSize"] = _HDRLightStudioConnection.CHDRLSLightTransform_m_vecSize_set
    __swig_getmethods__["m_vecSize"] = _HDRLightStudioConnection.CHDRLSLightTransform_m_vecSize_get
    if _newclass:m_vecSize = _swig_property(_HDRLightStudioConnection.CHDRLSLightTransform_m_vecSize_get, _HDRLightStudioConnection.CHDRLSLightTransform_m_vecSize_set)
    __swig_setmethods__["m_vecRotation"] = _HDRLightStudioConnection.CHDRLSLightTransform_m_vecRotation_set
    __swig_getmethods__["m_vecRotation"] = _HDRLightStudioConnection.CHDRLSLightTransform_m_vecRotation_get
    if _newclass:m_vecRotation = _swig_property(_HDRLightStudioConnection.CHDRLSLightTransform_m_vecRotation_get, _HDRLightStudioConnection.CHDRLSLightTransform_m_vecRotation_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSLightTransform()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSLightTransform
    __del__ = lambda self : None;
CHDRLSLightTransform_swigregister = _HDRLightStudioConnection.CHDRLSLightTransform_swigregister
CHDRLSLightTransform_swigregister(CHDRLSLightTransform)

class CHDRLSLightParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSLightParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSLightParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_eLightType"] = _HDRLightStudioConnection.CHDRLSLightParameters_m_eLightType_set
    __swig_getmethods__["m_eLightType"] = _HDRLightStudioConnection.CHDRLSLightParameters_m_eLightType_get
    if _newclass:m_eLightType = _swig_property(_HDRLightStudioConnection.CHDRLSLightParameters_m_eLightType_get, _HDRLightStudioConnection.CHDRLSLightParameters_m_eLightType_set)
    __swig_setmethods__["m_bActive"] = _HDRLightStudioConnection.CHDRLSLightParameters_m_bActive_set
    __swig_getmethods__["m_bActive"] = _HDRLightStudioConnection.CHDRLSLightParameters_m_bActive_get
    if _newclass:m_bActive = _swig_property(_HDRLightStudioConnection.CHDRLSLightParameters_m_bActive_get, _HDRLightStudioConnection.CHDRLSLightParameters_m_bActive_set)
    __swig_setmethods__["m_bVisibleToCamera"] = _HDRLightStudioConnection.CHDRLSLightParameters_m_bVisibleToCamera_set
    __swig_getmethods__["m_bVisibleToCamera"] = _HDRLightStudioConnection.CHDRLSLightParameters_m_bVisibleToCamera_get
    if _newclass:m_bVisibleToCamera = _swig_property(_HDRLightStudioConnection.CHDRLSLightParameters_m_bVisibleToCamera_get, _HDRLightStudioConnection.CHDRLSLightParameters_m_bVisibleToCamera_set)
    __swig_setmethods__["m_eLightFalloff"] = _HDRLightStudioConnection.CHDRLSLightParameters_m_eLightFalloff_set
    __swig_getmethods__["m_eLightFalloff"] = _HDRLightStudioConnection.CHDRLSLightParameters_m_eLightFalloff_get
    if _newclass:m_eLightFalloff = _swig_property(_HDRLightStudioConnection.CHDRLSLightParameters_m_eLightFalloff_get, _HDRLightStudioConnection.CHDRLSLightParameters_m_eLightFalloff_set)
    __swig_setmethods__["m_strName"] = _HDRLightStudioConnection.CHDRLSLightParameters_m_strName_set
    __swig_getmethods__["m_strName"] = _HDRLightStudioConnection.CHDRLSLightParameters_m_strName_get
    if _newclass:m_strName = _swig_property(_HDRLightStudioConnection.CHDRLSLightParameters_m_strName_get, _HDRLightStudioConnection.CHDRLSLightParameters_m_strName_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSLightParameters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSLightParameters
    __del__ = lambda self : None;
CHDRLSLightParameters_swigregister = _HDRLightStudioConnection.CHDRLSLightParameters_swigregister
CHDRLSLightParameters_swigregister(CHDRLSLightParameters)

class CHDRLSLightCreated(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSLightCreated, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSLightCreated, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_uID"] = _HDRLightStudioConnection.CHDRLSLightCreated_m_uID_set
    __swig_getmethods__["m_uID"] = _HDRLightStudioConnection.CHDRLSLightCreated_m_uID_get
    if _newclass:m_uID = _swig_property(_HDRLightStudioConnection.CHDRLSLightCreated_m_uID_get, _HDRLightStudioConnection.CHDRLSLightCreated_m_uID_set)
    __swig_setmethods__["m_cTransform"] = _HDRLightStudioConnection.CHDRLSLightCreated_m_cTransform_set
    __swig_getmethods__["m_cTransform"] = _HDRLightStudioConnection.CHDRLSLightCreated_m_cTransform_get
    if _newclass:m_cTransform = _swig_property(_HDRLightStudioConnection.CHDRLSLightCreated_m_cTransform_get, _HDRLightStudioConnection.CHDRLSLightCreated_m_cTransform_set)
    __swig_setmethods__["m_cParameters"] = _HDRLightStudioConnection.CHDRLSLightCreated_m_cParameters_set
    __swig_getmethods__["m_cParameters"] = _HDRLightStudioConnection.CHDRLSLightCreated_m_cParameters_get
    if _newclass:m_cParameters = _swig_property(_HDRLightStudioConnection.CHDRLSLightCreated_m_cParameters_get, _HDRLightStudioConnection.CHDRLSLightCreated_m_cParameters_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSLightCreated()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSLightCreated
    __del__ = lambda self : None;
CHDRLSLightCreated_swigregister = _HDRLightStudioConnection.CHDRLSLightCreated_swigregister
CHDRLSLightCreated_swigregister(CHDRLSLightCreated)

class CHDRLSLightDeleted(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSLightDeleted, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSLightDeleted, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_uID"] = _HDRLightStudioConnection.CHDRLSLightDeleted_m_uID_set
    __swig_getmethods__["m_uID"] = _HDRLightStudioConnection.CHDRLSLightDeleted_m_uID_get
    if _newclass:m_uID = _swig_property(_HDRLightStudioConnection.CHDRLSLightDeleted_m_uID_get, _HDRLightStudioConnection.CHDRLSLightDeleted_m_uID_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSLightDeleted()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSLightDeleted
    __del__ = lambda self : None;
CHDRLSLightDeleted_swigregister = _HDRLightStudioConnection.CHDRLSLightDeleted_swigregister
CHDRLSLightDeleted_swigregister(CHDRLSLightDeleted)

class CHDRLSLightTransformed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSLightTransformed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSLightTransformed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_uID"] = _HDRLightStudioConnection.CHDRLSLightTransformed_m_uID_set
    __swig_getmethods__["m_uID"] = _HDRLightStudioConnection.CHDRLSLightTransformed_m_uID_get
    if _newclass:m_uID = _swig_property(_HDRLightStudioConnection.CHDRLSLightTransformed_m_uID_get, _HDRLightStudioConnection.CHDRLSLightTransformed_m_uID_set)
    __swig_setmethods__["m_cTransform"] = _HDRLightStudioConnection.CHDRLSLightTransformed_m_cTransform_set
    __swig_getmethods__["m_cTransform"] = _HDRLightStudioConnection.CHDRLSLightTransformed_m_cTransform_get
    if _newclass:m_cTransform = _swig_property(_HDRLightStudioConnection.CHDRLSLightTransformed_m_cTransform_get, _HDRLightStudioConnection.CHDRLSLightTransformed_m_cTransform_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSLightTransformed()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSLightTransformed
    __del__ = lambda self : None;
CHDRLSLightTransformed_swigregister = _HDRLightStudioConnection.CHDRLSLightTransformed_swigregister
CHDRLSLightTransformed_swigregister(CHDRLSLightTransformed)

class CHDRLSLightProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSLightProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSLightProperties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_uID"] = _HDRLightStudioConnection.CHDRLSLightProperties_m_uID_set
    __swig_getmethods__["m_uID"] = _HDRLightStudioConnection.CHDRLSLightProperties_m_uID_get
    if _newclass:m_uID = _swig_property(_HDRLightStudioConnection.CHDRLSLightProperties_m_uID_get, _HDRLightStudioConnection.CHDRLSLightProperties_m_uID_set)
    __swig_setmethods__["m_cParameters"] = _HDRLightStudioConnection.CHDRLSLightProperties_m_cParameters_set
    __swig_getmethods__["m_cParameters"] = _HDRLightStudioConnection.CHDRLSLightProperties_m_cParameters_get
    if _newclass:m_cParameters = _swig_property(_HDRLightStudioConnection.CHDRLSLightProperties_m_cParameters_get, _HDRLightStudioConnection.CHDRLSLightProperties_m_cParameters_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSLightProperties()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSLightProperties
    __del__ = lambda self : None;
CHDRLSLightProperties_swigregister = _HDRLightStudioConnection.CHDRLSLightProperties_swigregister
CHDRLSLightProperties_swigregister(CHDRLSLightProperties)

class CHDRLSLightLiveUpdateRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSLightLiveUpdateRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSLightLiveUpdateRaw, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_uID"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_uID_set
    __swig_getmethods__["m_uID"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_uID_get
    if _newclass:m_uID = _swig_property(_HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_uID_get, _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_uID_set)
    __swig_setmethods__["m_eLightImageDataFormat"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_eLightImageDataFormat_set
    __swig_getmethods__["m_eLightImageDataFormat"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_eLightImageDataFormat_get
    if _newclass:m_eLightImageDataFormat = _swig_property(_HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_eLightImageDataFormat_get, _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_eLightImageDataFormat_set)
    __swig_setmethods__["m_pfRawData1"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_pfRawData1_set
    __swig_getmethods__["m_pfRawData1"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_pfRawData1_get
    if _newclass:m_pfRawData1 = _swig_property(_HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_pfRawData1_get, _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_pfRawData1_set)
    __swig_setmethods__["m_pfRawData2"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_pfRawData2_set
    __swig_getmethods__["m_pfRawData2"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_pfRawData2_get
    if _newclass:m_pfRawData2 = _swig_property(_HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_pfRawData2_get, _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_pfRawData2_set)
    __swig_setmethods__["m_puRawData2"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_puRawData2_set
    __swig_getmethods__["m_puRawData2"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_puRawData2_get
    if _newclass:m_puRawData2 = _swig_property(_HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_puRawData2_get, _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_puRawData2_set)
    __swig_setmethods__["m_nWidth"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_nWidth_set
    __swig_getmethods__["m_nWidth"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_nWidth_get
    if _newclass:m_nWidth = _swig_property(_HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_nWidth_get, _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_nWidth_set)
    __swig_setmethods__["m_nHeight"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_nHeight_set
    __swig_getmethods__["m_nHeight"] = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_nHeight_get
    if _newclass:m_nHeight = _swig_property(_HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_nHeight_get, _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_m_nHeight_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSLightLiveUpdateRaw()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSLightLiveUpdateRaw
    __del__ = lambda self : None;
CHDRLSLightLiveUpdateRaw_swigregister = _HDRLightStudioConnection.CHDRLSLightLiveUpdateRaw_swigregister
CHDRLSLightLiveUpdateRaw_swigregister(CHDRLSLightLiveUpdateRaw)

class CHDRLSLightUpdateFiles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSLightUpdateFiles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSLightUpdateFiles, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_uID"] = _HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_uID_set
    __swig_getmethods__["m_uID"] = _HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_uID_get
    if _newclass:m_uID = _swig_property(_HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_uID_get, _HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_uID_set)
    __swig_setmethods__["m_eLightImageDataFormat"] = _HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_eLightImageDataFormat_set
    __swig_getmethods__["m_eLightImageDataFormat"] = _HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_eLightImageDataFormat_get
    if _newclass:m_eLightImageDataFormat = _swig_property(_HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_eLightImageDataFormat_get, _HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_eLightImageDataFormat_set)
    __swig_setmethods__["m_strFilename1"] = _HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_strFilename1_set
    __swig_getmethods__["m_strFilename1"] = _HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_strFilename1_get
    if _newclass:m_strFilename1 = _swig_property(_HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_strFilename1_get, _HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_strFilename1_set)
    __swig_setmethods__["m_strFilename2"] = _HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_strFilename2_set
    __swig_getmethods__["m_strFilename2"] = _HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_strFilename2_get
    if _newclass:m_strFilename2 = _swig_property(_HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_strFilename2_get, _HDRLightStudioConnection.CHDRLSLightUpdateFiles_m_strFilename2_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSLightUpdateFiles()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSLightUpdateFiles
    __del__ = lambda self : None;
CHDRLSLightUpdateFiles_swigregister = _HDRLightStudioConnection.CHDRLSLightUpdateFiles_swigregister
CHDRLSLightUpdateFiles_swigregister(CHDRLSLightUpdateFiles)

class CHDRLSLightPaint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSLightPaint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSLightPaint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_eLPOperation"] = _HDRLightStudioConnection.CHDRLSLightPaint_m_eLPOperation_set
    __swig_getmethods__["m_eLPOperation"] = _HDRLightStudioConnection.CHDRLSLightPaint_m_eLPOperation_get
    if _newclass:m_eLPOperation = _swig_property(_HDRLightStudioConnection.CHDRLSLightPaint_m_eLPOperation_get, _HDRLightStudioConnection.CHDRLSLightPaint_m_eLPOperation_set)
    __swig_setmethods__["m_vecUVPos"] = _HDRLightStudioConnection.CHDRLSLightPaint_m_vecUVPos_set
    __swig_getmethods__["m_vecUVPos"] = _HDRLightStudioConnection.CHDRLSLightPaint_m_vecUVPos_get
    if _newclass:m_vecUVPos = _swig_property(_HDRLightStudioConnection.CHDRLSLightPaint_m_vecUVPos_get, _HDRLightStudioConnection.CHDRLSLightPaint_m_vecUVPos_set)
    __swig_setmethods__["m_vecWorldPos"] = _HDRLightStudioConnection.CHDRLSLightPaint_m_vecWorldPos_set
    __swig_getmethods__["m_vecWorldPos"] = _HDRLightStudioConnection.CHDRLSLightPaint_m_vecWorldPos_get
    if _newclass:m_vecWorldPos = _swig_property(_HDRLightStudioConnection.CHDRLSLightPaint_m_vecWorldPos_get, _HDRLightStudioConnection.CHDRLSLightPaint_m_vecWorldPos_set)
    __swig_setmethods__["m_vecCameraPos"] = _HDRLightStudioConnection.CHDRLSLightPaint_m_vecCameraPos_set
    __swig_getmethods__["m_vecCameraPos"] = _HDRLightStudioConnection.CHDRLSLightPaint_m_vecCameraPos_get
    if _newclass:m_vecCameraPos = _swig_property(_HDRLightStudioConnection.CHDRLSLightPaint_m_vecCameraPos_get, _HDRLightStudioConnection.CHDRLSLightPaint_m_vecCameraPos_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSLightPaint()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSLightPaint
    __del__ = lambda self : None;
CHDRLSLightPaint_swigregister = _HDRLightStudioConnection.CHDRLSLightPaint_swigregister
CHDRLSLightPaint_swigregister(CHDRLSLightPaint)

class CHDRLSThumbnail(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSThumbnail, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSThumbnail, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_eThumbnailType"] = _HDRLightStudioConnection.CHDRLSThumbnail_m_eThumbnailType_set
    __swig_getmethods__["m_eThumbnailType"] = _HDRLightStudioConnection.CHDRLSThumbnail_m_eThumbnailType_get
    if _newclass:m_eThumbnailType = _swig_property(_HDRLightStudioConnection.CHDRLSThumbnail_m_eThumbnailType_get, _HDRLightStudioConnection.CHDRLSThumbnail_m_eThumbnailType_set)
    __swig_setmethods__["m_uLightID"] = _HDRLightStudioConnection.CHDRLSThumbnail_m_uLightID_set
    __swig_getmethods__["m_uLightID"] = _HDRLightStudioConnection.CHDRLSThumbnail_m_uLightID_get
    if _newclass:m_uLightID = _swig_property(_HDRLightStudioConnection.CHDRLSThumbnail_m_uLightID_get, _HDRLightStudioConnection.CHDRLSThumbnail_m_uLightID_set)
    __swig_setmethods__["m_strFilename"] = _HDRLightStudioConnection.CHDRLSThumbnail_m_strFilename_set
    __swig_getmethods__["m_strFilename"] = _HDRLightStudioConnection.CHDRLSThumbnail_m_strFilename_get
    if _newclass:m_strFilename = _swig_property(_HDRLightStudioConnection.CHDRLSThumbnail_m_strFilename_get, _HDRLightStudioConnection.CHDRLSThumbnail_m_strFilename_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSThumbnail()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSThumbnail
    __del__ = lambda self : None;
CHDRLSThumbnail_swigregister = _HDRLightStudioConnection.CHDRLSThumbnail_swigregister
CHDRLSThumbnail_swigregister(CHDRLSThumbnail)

class CHDRLSFrameBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSFrameBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSFrameBuffer, name)
    __repr__ = _swig_repr
    BT_BEAUTY = _HDRLightStudioConnection.CHDRLSFrameBuffer_BT_BEAUTY
    BF_FILE = _HDRLightStudioConnection.CHDRLSFrameBuffer_BF_FILE
    BF_F32_RGBA = _HDRLightStudioConnection.CHDRLSFrameBuffer_BF_F32_RGBA
    BF_F32_RGB = _HDRLightStudioConnection.CHDRLSFrameBuffer_BF_F32_RGB
    BF_UINT8_RGBA = _HDRLightStudioConnection.CHDRLSFrameBuffer_BF_UINT8_RGBA
    CLUT_NONE = _HDRLightStudioConnection.CHDRLSFrameBuffer_CLUT_NONE
    CLUT_APPLIED = _HDRLightStudioConnection.CHDRLSFrameBuffer_CLUT_APPLIED
    CLUT_UNKNOWN = _HDRLightStudioConnection.CHDRLSFrameBuffer_CLUT_UNKNOWN
    __swig_setmethods__["m_nWidth"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_nWidth_set
    __swig_getmethods__["m_nWidth"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_nWidth_get
    if _newclass:m_nWidth = _swig_property(_HDRLightStudioConnection.CHDRLSFrameBuffer_m_nWidth_get, _HDRLightStudioConnection.CHDRLSFrameBuffer_m_nWidth_set)
    __swig_setmethods__["m_nHeight"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_nHeight_set
    __swig_getmethods__["m_nHeight"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_nHeight_get
    if _newclass:m_nHeight = _swig_property(_HDRLightStudioConnection.CHDRLSFrameBuffer_m_nHeight_get, _HDRLightStudioConnection.CHDRLSFrameBuffer_m_nHeight_set)
    __swig_setmethods__["m_szFilename"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_szFilename_set
    __swig_getmethods__["m_szFilename"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_szFilename_get
    if _newclass:m_szFilename = _swig_property(_HDRLightStudioConnection.CHDRLSFrameBuffer_m_szFilename_get, _HDRLightStudioConnection.CHDRLSFrameBuffer_m_szFilename_set)
    __swig_setmethods__["m_eBufferType"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_eBufferType_set
    __swig_getmethods__["m_eBufferType"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_eBufferType_get
    if _newclass:m_eBufferType = _swig_property(_HDRLightStudioConnection.CHDRLSFrameBuffer_m_eBufferType_get, _HDRLightStudioConnection.CHDRLSFrameBuffer_m_eBufferType_set)
    __swig_setmethods__["m_eBufferFormat"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_eBufferFormat_set
    __swig_getmethods__["m_eBufferFormat"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_eBufferFormat_get
    if _newclass:m_eBufferFormat = _swig_property(_HDRLightStudioConnection.CHDRLSFrameBuffer_m_eBufferFormat_get, _HDRLightStudioConnection.CHDRLSFrameBuffer_m_eBufferFormat_set)
    __swig_setmethods__["m_eBufferCLUT"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_eBufferCLUT_set
    __swig_getmethods__["m_eBufferCLUT"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_eBufferCLUT_get
    if _newclass:m_eBufferCLUT = _swig_property(_HDRLightStudioConnection.CHDRLSFrameBuffer_m_eBufferCLUT_get, _HDRLightStudioConnection.CHDRLSFrameBuffer_m_eBufferCLUT_set)
    __swig_setmethods__["m_vecCameraPos"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_vecCameraPos_set
    __swig_getmethods__["m_vecCameraPos"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_vecCameraPos_get
    if _newclass:m_vecCameraPos = _swig_property(_HDRLightStudioConnection.CHDRLSFrameBuffer_m_vecCameraPos_get, _HDRLightStudioConnection.CHDRLSFrameBuffer_m_vecCameraPos_set)
    __swig_setmethods__["m_vecNormalizedCameraLookAt"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_vecNormalizedCameraLookAt_set
    __swig_getmethods__["m_vecNormalizedCameraLookAt"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_vecNormalizedCameraLookAt_get
    if _newclass:m_vecNormalizedCameraLookAt = _swig_property(_HDRLightStudioConnection.CHDRLSFrameBuffer_m_vecNormalizedCameraLookAt_get, _HDRLightStudioConnection.CHDRLSFrameBuffer_m_vecNormalizedCameraLookAt_set)
    __swig_setmethods__["m_vecNormalizedCameraUp"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_vecNormalizedCameraUp_set
    __swig_getmethods__["m_vecNormalizedCameraUp"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_vecNormalizedCameraUp_get
    if _newclass:m_vecNormalizedCameraUp = _swig_property(_HDRLightStudioConnection.CHDRLSFrameBuffer_m_vecNormalizedCameraUp_get, _HDRLightStudioConnection.CHDRLSFrameBuffer_m_vecNormalizedCameraUp_set)
    __swig_setmethods__["m_fCameraFOV"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_fCameraFOV_set
    __swig_getmethods__["m_fCameraFOV"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_fCameraFOV_get
    if _newclass:m_fCameraFOV = _swig_property(_HDRLightStudioConnection.CHDRLSFrameBuffer_m_fCameraFOV_get, _HDRLightStudioConnection.CHDRLSFrameBuffer_m_fCameraFOV_set)
    __swig_setmethods__["m_fPixelAspectRatio"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_fPixelAspectRatio_set
    __swig_getmethods__["m_fPixelAspectRatio"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_fPixelAspectRatio_get
    if _newclass:m_fPixelAspectRatio = _swig_property(_HDRLightStudioConnection.CHDRLSFrameBuffer_m_fPixelAspectRatio_get, _HDRLightStudioConnection.CHDRLSFrameBuffer_m_fPixelAspectRatio_set)
    __swig_setmethods__["m_pData"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_pData_set
    __swig_getmethods__["m_pData"] = _HDRLightStudioConnection.CHDRLSFrameBuffer_m_pData_get
    if _newclass:m_pData = _swig_property(_HDRLightStudioConnection.CHDRLSFrameBuffer_m_pData_get, _HDRLightStudioConnection.CHDRLSFrameBuffer_m_pData_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSFrameBuffer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSFrameBuffer
    __del__ = lambda self : None;
CHDRLSFrameBuffer_swigregister = _HDRLightStudioConnection.CHDRLSFrameBuffer_swigregister
CHDRLSFrameBuffer_swigregister(CHDRLSFrameBuffer)

class CHDRLSTraceRayResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSTraceRayResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSTraceRayResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_fRayIntersectionDepth"] = _HDRLightStudioConnection.CHDRLSTraceRayResult_m_fRayIntersectionDepth_set
    __swig_getmethods__["m_fRayIntersectionDepth"] = _HDRLightStudioConnection.CHDRLSTraceRayResult_m_fRayIntersectionDepth_get
    if _newclass:m_fRayIntersectionDepth = _swig_property(_HDRLightStudioConnection.CHDRLSTraceRayResult_m_fRayIntersectionDepth_get, _HDRLightStudioConnection.CHDRLSTraceRayResult_m_fRayIntersectionDepth_set)
    __swig_setmethods__["m_vecNormalizedSurfaceNormal"] = _HDRLightStudioConnection.CHDRLSTraceRayResult_m_vecNormalizedSurfaceNormal_set
    __swig_getmethods__["m_vecNormalizedSurfaceNormal"] = _HDRLightStudioConnection.CHDRLSTraceRayResult_m_vecNormalizedSurfaceNormal_get
    if _newclass:m_vecNormalizedSurfaceNormal = _swig_property(_HDRLightStudioConnection.CHDRLSTraceRayResult_m_vecNormalizedSurfaceNormal_get, _HDRLightStudioConnection.CHDRLSTraceRayResult_m_vecNormalizedSurfaceNormal_set)
    __swig_setmethods__["m_vecNormalizedIncidenceRay"] = _HDRLightStudioConnection.CHDRLSTraceRayResult_m_vecNormalizedIncidenceRay_set
    __swig_getmethods__["m_vecNormalizedIncidenceRay"] = _HDRLightStudioConnection.CHDRLSTraceRayResult_m_vecNormalizedIncidenceRay_get
    if _newclass:m_vecNormalizedIncidenceRay = _swig_property(_HDRLightStudioConnection.CHDRLSTraceRayResult_m_vecNormalizedIncidenceRay_get, _HDRLightStudioConnection.CHDRLSTraceRayResult_m_vecNormalizedIncidenceRay_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSTraceRayResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSTraceRayResult
    __del__ = lambda self : None;
CHDRLSTraceRayResult_swigregister = _HDRLightStudioConnection.CHDRLSTraceRayResult_swigregister
CHDRLSTraceRayResult_swigregister(CHDRLSTraceRayResult)

class CHDRLSSceneSync(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSSceneSync, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSSceneSync, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_bTemporaryFile"] = _HDRLightStudioConnection.CHDRLSSceneSync_m_bTemporaryFile_set
    __swig_getmethods__["m_bTemporaryFile"] = _HDRLightStudioConnection.CHDRLSSceneSync_m_bTemporaryFile_get
    if _newclass:m_bTemporaryFile = _swig_property(_HDRLightStudioConnection.CHDRLSSceneSync_m_bTemporaryFile_get, _HDRLightStudioConnection.CHDRLSSceneSync_m_bTemporaryFile_set)
    __swig_setmethods__["m_szFilename"] = _HDRLightStudioConnection.CHDRLSSceneSync_m_szFilename_set
    __swig_getmethods__["m_szFilename"] = _HDRLightStudioConnection.CHDRLSSceneSync_m_szFilename_get
    if _newclass:m_szFilename = _swig_property(_HDRLightStudioConnection.CHDRLSSceneSync_m_szFilename_get, _HDRLightStudioConnection.CHDRLSSceneSync_m_szFilename_set)
    __swig_setmethods__["m_bZUp"] = _HDRLightStudioConnection.CHDRLSSceneSync_m_bZUp_set
    __swig_getmethods__["m_bZUp"] = _HDRLightStudioConnection.CHDRLSSceneSync_m_bZUp_get
    if _newclass:m_bZUp = _swig_property(_HDRLightStudioConnection.CHDRLSSceneSync_m_bZUp_get, _HDRLightStudioConnection.CHDRLSSceneSync_m_bZUp_set)
    __swig_setmethods__["m_szCameraName"] = _HDRLightStudioConnection.CHDRLSSceneSync_m_szCameraName_set
    __swig_getmethods__["m_szCameraName"] = _HDRLightStudioConnection.CHDRLSSceneSync_m_szCameraName_get
    if _newclass:m_szCameraName = _swig_property(_HDRLightStudioConnection.CHDRLSSceneSync_m_szCameraName_get, _HDRLightStudioConnection.CHDRLSSceneSync_m_szCameraName_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSSceneSync()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSSceneSync
    __del__ = lambda self : None;
CHDRLSSceneSync_swigregister = _HDRLightStudioConnection.CHDRLSSceneSync_swigregister
CHDRLSSceneSync_swigregister(CHDRLSSceneSync)

class CHDRLSSceneSyncRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSSceneSyncRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSSceneSyncRequest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_bTemporaryFile"] = _HDRLightStudioConnection.CHDRLSSceneSyncRequest_m_bTemporaryFile_set
    __swig_getmethods__["m_bTemporaryFile"] = _HDRLightStudioConnection.CHDRLSSceneSyncRequest_m_bTemporaryFile_get
    if _newclass:m_bTemporaryFile = _swig_property(_HDRLightStudioConnection.CHDRLSSceneSyncRequest_m_bTemporaryFile_get, _HDRLightStudioConnection.CHDRLSSceneSyncRequest_m_bTemporaryFile_set)
    __swig_setmethods__["m_szFilename"] = _HDRLightStudioConnection.CHDRLSSceneSyncRequest_m_szFilename_set
    __swig_getmethods__["m_szFilename"] = _HDRLightStudioConnection.CHDRLSSceneSyncRequest_m_szFilename_get
    if _newclass:m_szFilename = _swig_property(_HDRLightStudioConnection.CHDRLSSceneSyncRequest_m_szFilename_get, _HDRLightStudioConnection.CHDRLSSceneSyncRequest_m_szFilename_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSSceneSyncRequest()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSSceneSyncRequest
    __del__ = lambda self : None;
CHDRLSSceneSyncRequest_swigregister = _HDRLightStudioConnection.CHDRLSSceneSyncRequest_swigregister
CHDRLSSceneSyncRequest_swigregister(CHDRLSSceneSyncRequest)

class CHDRLSProductionRender(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHDRLSProductionRender, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHDRLSProductionRender, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_bPerformQuickRender"] = _HDRLightStudioConnection.CHDRLSProductionRender_m_bPerformQuickRender_set
    __swig_getmethods__["m_bPerformQuickRender"] = _HDRLightStudioConnection.CHDRLSProductionRender_m_bPerformQuickRender_get
    if _newclass:m_bPerformQuickRender = _swig_property(_HDRLightStudioConnection.CHDRLSProductionRender_m_bPerformQuickRender_get, _HDRLightStudioConnection.CHDRLSProductionRender_m_bPerformQuickRender_set)
    __swig_setmethods__["m_eFormat"] = _HDRLightStudioConnection.CHDRLSProductionRender_m_eFormat_set
    __swig_getmethods__["m_eFormat"] = _HDRLightStudioConnection.CHDRLSProductionRender_m_eFormat_get
    if _newclass:m_eFormat = _swig_property(_HDRLightStudioConnection.CHDRLSProductionRender_m_eFormat_get, _HDRLightStudioConnection.CHDRLSProductionRender_m_eFormat_set)
    __swig_setmethods__["m_szOutputFilename"] = _HDRLightStudioConnection.CHDRLSProductionRender_m_szOutputFilename_set
    __swig_getmethods__["m_szOutputFilename"] = _HDRLightStudioConnection.CHDRLSProductionRender_m_szOutputFilename_get
    if _newclass:m_szOutputFilename = _swig_property(_HDRLightStudioConnection.CHDRLSProductionRender_m_szOutputFilename_get, _HDRLightStudioConnection.CHDRLSProductionRender_m_szOutputFilename_set)
    def __init__(self): 
        this = _HDRLightStudioConnection.new_CHDRLSProductionRender()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDRLightStudioConnection.delete_CHDRLSProductionRender
    __del__ = lambda self : None;
CHDRLSProductionRender_swigregister = _HDRLightStudioConnection.CHDRLSProductionRender_swigregister
CHDRLSProductionRender_swigregister(CHDRLSProductionRender)


def InitialiseHdrLightStudio(*args):
  return _HDRLightStudioConnection.InitialiseHdrLightStudio(*args)
InitialiseHdrLightStudio = _HDRLightStudioConnection.InitialiseHdrLightStudio

def InitialiseHdrLightStudioEx(*args):
  return _HDRLightStudioConnection.InitialiseHdrLightStudioEx(*args)
InitialiseHdrLightStudioEx = _HDRLightStudioConnection.InitialiseHdrLightStudioEx

def SetRawHdrFileUpdateCb(*args):
  return _HDRLightStudioConnection.SetRawHdrFileUpdateCb(*args)
SetRawHdrFileUpdateCb = _HDRLightStudioConnection.SetRawHdrFileUpdateCb

def SetProductionRenderFileUpdateCb(*args):
  return _HDRLightStudioConnection.SetProductionRenderFileUpdateCb(*args)
SetProductionRenderFileUpdateCb = _HDRLightStudioConnection.SetProductionRenderFileUpdateCb

def SetHideCloseCb(*args):
  return _HDRLightStudioConnection.SetHideCloseCb(*args)
SetHideCloseCb = _HDRLightStudioConnection.SetHideCloseCb

def SetLightCreatedCb(*args):
  return _HDRLightStudioConnection.SetLightCreatedCb(*args)
SetLightCreatedCb = _HDRLightStudioConnection.SetLightCreatedCb

def SetLightDeletedCb(*args):
  return _HDRLightStudioConnection.SetLightDeletedCb(*args)
SetLightDeletedCb = _HDRLightStudioConnection.SetLightDeletedCb

def SetLightTransformedCb(*args):
  return _HDRLightStudioConnection.SetLightTransformedCb(*args)
SetLightTransformedCb = _HDRLightStudioConnection.SetLightTransformedCb

def SetLightPropertiesCb(*args):
  return _HDRLightStudioConnection.SetLightPropertiesCb(*args)
SetLightPropertiesCb = _HDRLightStudioConnection.SetLightPropertiesCb

def SetLightLiveUpdateRawCb(*args):
  return _HDRLightStudioConnection.SetLightLiveUpdateRawCb(*args)
SetLightLiveUpdateRawCb = _HDRLightStudioConnection.SetLightLiveUpdateRawCb

def SetLightLiveUpdateFileCb(*args):
  return _HDRLightStudioConnection.SetLightLiveUpdateFileCb(*args)
SetLightLiveUpdateFileCb = _HDRLightStudioConnection.SetLightLiveUpdateFileCb

def SetLightProductionRenderUpdateCb(*args):
  return _HDRLightStudioConnection.SetLightProductionRenderUpdateCb(*args)
SetLightProductionRenderUpdateCb = _HDRLightStudioConnection.SetLightProductionRenderUpdateCb

def SetLoadCompleteCb(*args):
  return _HDRLightStudioConnection.SetLoadCompleteCb(*args)
SetLoadCompleteCb = _HDRLightStudioConnection.SetLoadCompleteCb

def SetThumbnailCb(*args):
  return _HDRLightStudioConnection.SetThumbnailCb(*args)
SetThumbnailCb = _HDRLightStudioConnection.SetThumbnailCb

def SetFrameBufferRequestCb(*args):
  return _HDRLightStudioConnection.SetFrameBufferRequestCb(*args)
SetFrameBufferRequestCb = _HDRLightStudioConnection.SetFrameBufferRequestCb

def SetTraceRayRequestCb(*args):
  return _HDRLightStudioConnection.SetTraceRayRequestCb(*args)
SetTraceRayRequestCb = _HDRLightStudioConnection.SetTraceRayRequestCb

def SetGetParamIntCb(*args):
  return _HDRLightStudioConnection.SetGetParamIntCb(*args)
SetGetParamIntCb = _HDRLightStudioConnection.SetGetParamIntCb

def SetGetParamFloatCb(*args):
  return _HDRLightStudioConnection.SetGetParamFloatCb(*args)
SetGetParamFloatCb = _HDRLightStudioConnection.SetGetParamFloatCb

def SetGetParamStringCb(*args):
  return _HDRLightStudioConnection.SetGetParamStringCb(*args)
SetGetParamStringCb = _HDRLightStudioConnection.SetGetParamStringCb

def SetGetParamCHDRLSVec2fCb(*args):
  return _HDRLightStudioConnection.SetGetParamCHDRLSVec2fCb(*args)
SetGetParamCHDRLSVec2fCb = _HDRLightStudioConnection.SetGetParamCHDRLSVec2fCb

def SetSetParamIntCb(*args):
  return _HDRLightStudioConnection.SetSetParamIntCb(*args)
SetSetParamIntCb = _HDRLightStudioConnection.SetSetParamIntCb

def SetSetParamFloatCb(*args):
  return _HDRLightStudioConnection.SetSetParamFloatCb(*args)
SetSetParamFloatCb = _HDRLightStudioConnection.SetSetParamFloatCb

def SetSetParamStringCb(*args):
  return _HDRLightStudioConnection.SetSetParamStringCb(*args)
SetSetParamStringCb = _HDRLightStudioConnection.SetSetParamStringCb

def SetSetParamCHDRLSVec2fCb(*args):
  return _HDRLightStudioConnection.SetSetParamCHDRLSVec2fCb(*args)
SetSetParamCHDRLSVec2fCb = _HDRLightStudioConnection.SetSetParamCHDRLSVec2fCb

def SetIPRControlCb(*args):
  return _HDRLightStudioConnection.SetIPRControlCb(*args)
SetIPRControlCb = _HDRLightStudioConnection.SetIPRControlCb

def SetSceneSyncRequestCb(*args):
  return _HDRLightStudioConnection.SetSceneSyncRequestCb(*args)
SetSceneSyncRequestCb = _HDRLightStudioConnection.SetSceneSyncRequestCb

def ShowMainInterface():
  return _HDRLightStudioConnection.ShowMainInterface()
ShowMainInterface = _HDRLightStudioConnection.ShowMainInterface

def HideMainInterface():
  return _HDRLightStudioConnection.HideMainInterface()
HideMainInterface = _HDRLightStudioConnection.HideMainInterface

def EnableMainInterface():
  return _HDRLightStudioConnection.EnableMainInterface()
EnableMainInterface = _HDRLightStudioConnection.EnableMainInterface

def DisableMainInterface():
  return _HDRLightStudioConnection.DisableMainInterface()
DisableMainInterface = _HDRLightStudioConnection.DisableMainInterface

def Exit():
  return _HDRLightStudioConnection.Exit()
Exit = _HDRLightStudioConnection.Exit

def SetSettings(*args):
  return _HDRLightStudioConnection.SetSettings(*args)
SetSettings = _HDRLightStudioConnection.SetSettings

def IsRunning():
  return _HDRLightStudioConnection.IsRunning()
IsRunning = _HDRLightStudioConnection.IsRunning

def IsVisible():
  return _HDRLightStudioConnection.IsVisible()
IsVisible = _HDRLightStudioConnection.IsVisible

def LoadProject(*args):
  return _HDRLightStudioConnection.LoadProject(*args)
LoadProject = _HDRLightStudioConnection.LoadProject

def SaveProject():
  return _HDRLightStudioConnection.SaveProject()
SaveProject = _HDRLightStudioConnection.SaveProject

def ForceRender():
  return _HDRLightStudioConnection.ForceRender()
ForceRender = _HDRLightStudioConnection.ForceRender

def UpdateBackgroundHdrImage(*args):
  return _HDRLightStudioConnection.UpdateBackgroundHdrImage(*args)
UpdateBackgroundHdrImage = _HDRLightStudioConnection.UpdateBackgroundHdrImage

def PositionCurrentlySelectedNode(*args):
  return _HDRLightStudioConnection.PositionCurrentlySelectedNode(*args)
PositionCurrentlySelectedNode = _HDRLightStudioConnection.PositionCurrentlySelectedNode

def SelectNodeViaEnvMapUV(*args):
  return _HDRLightStudioConnection.SelectNodeViaEnvMapUV(*args)
SelectNodeViaEnvMapUV = _HDRLightStudioConnection.SelectNodeViaEnvMapUV

def GetHostRenderers():
  return _HDRLightStudioConnection.GetHostRenderers()
GetHostRenderers = _HDRLightStudioConnection.GetHostRenderers

def SetHostRenderer(*args):
  return _HDRLightStudioConnection.SetHostRenderer(*args)
SetHostRenderer = _HDRLightStudioConnection.SetHostRenderer

def SetHostRendererTransform(*args):
  return _HDRLightStudioConnection.SetHostRendererTransform(*args)
SetHostRendererTransform = _HDRLightStudioConnection.SetHostRendererTransform

def ToggleLightPaintMode(*args):
  return _HDRLightStudioConnection.ToggleLightPaintMode(*args)
ToggleLightPaintMode = _HDRLightStudioConnection.ToggleLightPaintMode

def LoadScene(*args):
  return _HDRLightStudioConnection.LoadScene(*args)
LoadScene = _HDRLightStudioConnection.LoadScene

def ShowRenderDialog():
  return _HDRLightStudioConnection.ShowRenderDialog()
ShowRenderDialog = _HDRLightStudioConnection.ShowRenderDialog

def GetCurrentNodePosition():
  return _HDRLightStudioConnection.GetCurrentNodePosition()
GetCurrentNodePosition = _HDRLightStudioConnection.GetCurrentNodePosition

def GetHostRendererSettings(*args):
  return _HDRLightStudioConnection.GetHostRendererSettings(*args)
GetHostRendererSettings = _HDRLightStudioConnection.GetHostRendererSettings

def SelectSceneFileCamera(*args):
  return _HDRLightStudioConnection.SelectSceneFileCamera(*args)
SelectSceneFileCamera = _HDRLightStudioConnection.SelectSceneFileCamera

def SetSceneFileZUp(*args):
  return _HDRLightStudioConnection.SetSceneFileZUp(*args)
SetSceneFileZUp = _HDRLightStudioConnection.SetSceneFileZUp

def SetProxyFormat(*args):
  return _HDRLightStudioConnection.SetProxyFormat(*args)
SetProxyFormat = _HDRLightStudioConnection.SetProxyFormat

def NewProject(*args):
  return _HDRLightStudioConnection.NewProject(*args)
NewProject = _HDRLightStudioConnection.NewProject

def LightPaint(*args):
  return _HDRLightStudioConnection.LightPaint(*args)
LightPaint = _HDRLightStudioConnection.LightPaint

def FrameBuffer(*args):
  return _HDRLightStudioConnection.FrameBuffer(*args)
FrameBuffer = _HDRLightStudioConnection.FrameBuffer

def ASyncError(*args):
  return _HDRLightStudioConnection.ASyncError(*args)
ASyncError = _HDRLightStudioConnection.ASyncError

def SceneSync(*args):
  return _HDRLightStudioConnection.SceneSync(*args)
SceneSync = _HDRLightStudioConnection.SceneSync

def DoProductionRender(*args):
  return _HDRLightStudioConnection.DoProductionRender(*args)
DoProductionRender = _HDRLightStudioConnection.DoProductionRender
# This file is compatible with both classic and new-style classes.


