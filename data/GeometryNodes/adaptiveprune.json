[
    {
        "QHWNode": "kwargs = {'toolname': 'geo', 'panename': '', 'altclick': False, 'ctrlclick': False,                'shiftclick': False, 'cmdclick': False, 'pane': None, 'viewport': None, 'inputnodename': '',                'outputindex': -1, 'inputs': [], 'outputnodename': '', 'inputindex': -1, 'outputs': [],                'branch': False, 'autoplace': False, 'requestnew': False}\nimport hou\n\nimport sys\nimport toolutils\n\noutputitem = None\ninputindex = -1\ninputitem = None\noutputindex = -1\n\nnum_args = 1\nh_extra_args = ''\npane = toolutils.activePane(kwargs)\nif not isinstance(pane, hou.NetworkEditor):\n    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)\n    if pane is None:\n       hou.ui.displayMessage(\n               'Cannot create node: cannot find any network pane')\n       sys.exit(0)\nelse: # We're creating this tool from the TAB menu inside a network editor\n    pane_node = pane.pwd()\n    if \"outputnodename\" in kwargs and \"inputindex\" in kwargs:\n        outputitem = pane_node.item(kwargs[\"outputnodename\"])\n        inputindex = kwargs[\"inputindex\"]\n        h_extra_args += 'set arg4 = \"' + kwargs[\"outputnodename\"] + '\"\\n'\n        h_extra_args += 'set arg5 = \"' + str(inputindex) + '\"\\n'\n        num_args = 6\n    if \"inputnodename\" in kwargs and \"outputindex\" in kwargs:\n        inputitem = pane_node.item(kwargs[\"inputnodename\"])\n        outputindex = kwargs[\"outputindex\"]\n        h_extra_args += 'set arg6 = \"' + kwargs[\"inputnodename\"] + '\"\\n'\n        h_extra_args += 'set arg9 = \"' + str(outputindex) + '\"\\n'\n        num_args = 9\n    if \"autoplace\" in kwargs:\n        autoplace = kwargs[\"autoplace\"]\n    else:\n        autoplace = False\n    # If shift-clicked we want to auto append to the current\n    # node\n    if \"shiftclick\" in kwargs and kwargs[\"shiftclick\"]:\n        if inputitem is None:\n            inputitem = pane.currentNode()\n            outputindex = 0\n    if \"nodepositionx\" in kwargs and             \"nodepositiony\" in kwargs:\n        try:\n            pos = [ float( kwargs[\"nodepositionx\"] ),\n                    float( kwargs[\"nodepositiony\"] )]\n        except:\n            pos = None\n    else:\n        pos = None\n\n    if not autoplace and not pane.listMode():\n        if pos is not None:\n            pass\n        elif outputitem is None:\n            pos = pane.selectPosition(inputitem, outputindex, None, -1)\n        else:\n            pos = pane.selectPosition(inputitem, outputindex,\n                                      outputitem, inputindex)\n\n    if pos is not None:\n        if \"node_bbox\" in kwargs:\n            size = kwargs[\"node_bbox\"]\n            pos[0] -= size[0] / 2\n            pos[1] -= size[1] / 2\n        else:\n            pos[0] -= 0.573625\n            pos[1] -= 0.220625\n        h_extra_args += 'set arg2 = \"' + str(pos[0]) + '\"\\n'\n        h_extra_args += 'set arg3 = \"' + str(pos[1]) + '\"\\n'\nh_extra_args += 'set argc = \"' + str(num_args) + '\"\\n'\n\npane_node = pane.pwd()\nchild_type = pane_node.childTypeCategory().nodeTypes()\n\nif 'stash' not in child_type:\n   hou.ui.displayMessage(\n           'Cannot create node: incompatible pane network type')\n   sys.exit(0)\n\n# First clear the node selection\npane_node.setSelected(False, True)\n\nh_path = pane_node.path()\nh_preamble = 'set arg1 = \"' + h_path + '\"\\n'\nh_cmd = r'''\nif ($argc < 2 || \"$arg2\" == \"\") then\n   set arg2 = 0\nendif\nif ($argc < 3 || \"$arg3\" == \"\") then\n   set arg3 = 0\nendif\n# Automatically generated script\n# $arg1 - the path to add this node\n# $arg2 - x position of the tile\n# $arg3 - y position of the tile\n# $arg4 - input node to wire to\n# $arg5 - which input to wire to\n# $arg6 - output node to wire to\n# $arg7 - the type of this node\n# $arg8 - the node is an indirect input\n# $arg9 - index of output from $arg6\n\n\\set noalias = 1\nset saved_path = `execute(\"oppwf\")`\nopcf $arg1\n\n# Node $_obj_geo1_stash1 (Sop/stash)\nset _obj_geo1_stash1 = `run(\"opadd -e -n -v stash stash1\")`\noplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_stash1\nopparm -V 19.0.383 $_obj_geo1_stash1 stash ( 'geometry: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' )\nopset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_stash1\nopexprlanguage -s hscript $_obj_geo1_stash1\nopset -p on $_obj_geo1_stash1\n\nopcf $arg1\n\nset oidx = 0\nif ($argc >= 9 && \"$arg9\" != \"\") then\n    set oidx = $arg9\nendif\n\nif ($argc >= 5 && \"$arg4\" != \"\") then\n    set output = $_obj_geo1_stash1\n    opwire -n $output -$arg5 $arg4\nendif\nif ($argc >= 6 && \"$arg6\" != \"\") then\n    set input = $_obj_geo1_stash1\n    if ($arg8) then\n        opwire -n -i $arg6 -0 $input\n    else\n        opwire -n -o $oidx $arg6 -0 $input\n    endif\nendif\nopcf $saved_path\n'''\nhou.hscript(h_preamble + h_extra_args + h_cmd)\n"
    }
]